
pragma solidity ^0.4.16;

interface token {
    function transfer(address receiver, uint amount);
}

contract Ownable {

    address public owner;

    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
}

contract SquidPrivatesale is Ownable{
    address public beneficiary;
    address addressToSendEthereum;
    uint public fundingGoal;
    uint public amountRaised;
    uint public deadline;
    uint256 public rate;
    uint256 public bonus;
    token public tokenReward;
    mapping(address => uint256) public balanceOf;
    bool fundingGoalReached = false;
    bool crowdsaleClosed = false;

    event GoalReached(address recipient, uint totalAmountRaised);
    event FundTransfer(address backer, uint amount, bool isContribution);
    // This notifies clients about the amount burnt
    event Burn(address indexed from, uint256 value);
    /**
     * Constructor function
     *
     * Setup the owner
     */
    function SquidPrivatesale(address addressOfTokenUsedAsReward, address _addressToSendEthereum)
    public {
        beneficiary = _addressToSendEthereum;
        fundingGoal = 100 * 1 ether;
        deadline = now + 100 * 1 minutes;
        // Base rate of SQWD tokens per ETH 
        rate = 1006; //Set 21/10/18 - ETH = Â£151
        // 100% bonus for whitelisted private-sale
        bonus = 2;
        tokenReward = token(addressOfTokenUsedAsReward);
    }

    /**
     * Fallback function
     *
     * The function without name is the default function that is called whenever anyone sends funds to a contract
     */
    function () public payable {
        require(!crowdsaleClosed);
        uint amount = msg.value;
        balanceOf[msg.sender] += amount;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, ((amount * rate) * bonus));
        beneficiary.transfer(amount);
        FundTransfer(msg.sender, amount, true);
    }

    modifier afterDeadline() { if (now >= deadline) _; }

    /**
     * Check if goal was reached
     *
     * Checks if the goal or time limit has been reached and ends the campaign
     */
    function checkGoalReached() afterDeadline {
        if (amountRaised >= fundingGoal){
            fundingGoalReached = true;
            GoalReached(beneficiary, amountRaised);
        }
        crowdsaleClosed = true;
    }
    


    /**
     * Withdraw the funds
     *
     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,
     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw
     * the amount they contributed.
     */
     
    function burnAfterIco()  public payable onlyOwner afterDeadline
    {  
    
    }
}
